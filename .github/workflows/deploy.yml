name: Deploy
on:
  push:
    branches:
      - main
concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  ECR_REPOSITORY: ""
  NODE_VERSION: 20.12.0
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_ROOT: terraform

  # Terraform variables - ideally this would be in a secrets manager but for now it's here ;)
  TF_VAR_env: "live"
  TF_VAR_zone_id: ${{ secrets.ZONE_ID }}
  TF_VAR_domain: "ecs.lhowsam.com"
  TF_VAR_private_key: ${{ secrets.PRIVATE_KEY }}
  TF_VAR_certificate_body: ${{ secrets.CERT_BODY }}
  TF_VAR_certificate_chain: ${{ secrets.CERT_CHAIN }}
  TF_VAR_docker_image_tag: "0.0"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  provison-ecs:
    name: Provision ECR infrastructure if required
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=ecs-live-terraform-state" -backend-config="key=vpc/live.tfstate" -no-color -input=false
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Terraform Plan
        id: plan
        working-directory: ${{env.TERRAFORM_ROOT}}
        run: |
          terraform plan \
          -target=aws_ecr_repository.app_ecr_repo \
          -out ./app.out

      - name: Create ECR repo
        id: apply
        run: terraform apply -auto-approve ./app.out
        working-directory: ${{env.TERRAFORM_ROOT}}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: provison-ecs
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          run_install: false
          version: 8

      - name: Install dependencies
        run: pnpm i

      - name: changeset
        run: npx changeset

      - name: create and publish versions
        uses: changesets/action@v1
        with:
          commit: "chore(release): publish [skip ci]"
          title: "chore(release): publish [skip ci]"
          createGithubReleases: true

      # - name: Publish packages
      #   run: |
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "${{ github.actor }}@users.noreply.github.com"
      #     git push --force --no-verify --follow-tags

  deploy-container-image:
    name: deploy to ECS
    needs: [provison-ecs, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=ecs-live-terraform-state" -backend-config="key=vpc/live.tfstate" -no-color -input=false
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Output terraform variables to file
        id: output
        working-directory: ${{ env.TERRAFORM_ROOT }}
        run: |
          terraform output -json > ./terraform-outputs.json

      - name: Set vars from terraform outputs
        working-directory: ${{ env.TERRAFORM_ROOT }}
        run: |
          outputs=$(cat terraform-outputs.json)
          ecr_repo_name=$(echo $outputs | jq -r .ecr_repo_name.value)
          echo "ECR_REPO_NAME=$ecr_repo_name" >> $GITHUB_ENV

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from changeset
        id: get_version
        run: |
          version=$(sh version.sh)
          echo "TF_VAR_docker_image_tag=$version" >> $GITHUB_ENV

      - name: build, tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ env.TF_VAR_docker_image_tag }}
        run: |
          docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-infrastructure:
    name: Deploy infrastructure
    needs: deploy-container-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=ecs-live-terraform-state" -backend-config="key=vpc/live.tfstate" -no-color -input=false
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_ROOT }}

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_ROOT }}
        run: |
          terraform plan \
          -out ./app.out

      - name: Terraform Apply
        id: apply
        run: terraform apply ./app.out
        working-directory: ${{ env.TERRAFORM_ROOT }}
